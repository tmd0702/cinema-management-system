DROP DATABASE MOVIE;
CREATE DATABASE MOVIE;
USE MOVIE;
-- SELECT * FROM MOVIES WHERE ID = '100450';
-- SELECT USERS.ID AS 'USERS.ID', USERS.USERNAME AS 'USERS.USERNAME', USERS.FIRST_NAME AS 'USERS.FIRST_NAME', USERS.LAST_NAME AS 'USERS.LAST_NAME', USERS.DOB AS 'USERS.DOB', USERS.GENDER AS 'USERS.GENDER', USERS.ADDRESS AS 'USERS.ADDRESS', USERS.PHONE AS 'USERS.PHONE', USERS.EMAIL AS '', USERS.USER_ROLE AS 'USERS.USER_ROLE', USERS.SCORE AS 'USERS.SCORE', USER_CATEGORY.CATEGORY AS 'USER_CATEGORY.CATEGORY' FROM USERS, USER_CATEGORY WHERE USERS.USER_CATEGORY_ID = USER_CATEGORY.ID LIMIT 0, 11;
-- SELECT U.*, UC.CATEGORY AS USER_CATEGORY_CATEGORY FROM USERS U, USER_CATEGORY UC WHERE U.USER_CATEGORY_ID = UC.ID LIMIT 0, 11;
-- select * from payments;
-- select s.*, st.start_time, sr.cinema_id from schedules s, show_times st, screen_rooms sr where s.show_time_id = st.id and sr.id = s.screen_room_id;
-- INSERT INTO AUTHENTICATION VALUES('1', 'sa123456', 'USE_00001');
-- select * from promotions;
CREATE TABLE USER_CATEGORY (
	ID VARCHAR(10),
    CATEGORY VARCHAR(40),
    POINT_LOWERBOUND INT,
    CONSTRAINT PK_UC PRIMARY KEY (ID)
) ENGINE = InnoDB;
CREATE TABLE USERS(
	ID VARCHAR(10) NOT NULL,
    USERNAME VARCHAR(255) UNIQUE, -- TEN TAI KHOAN
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255) NOT NULL,
    -- FULLNAME VARCHAR(255),
    DOB DATE,	-- date of birth
    GENDER VARCHAR(3),
    ADDRESS VARCHAR(255),
    PHONE VARCHAR(10) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL,
    USER_ROLE VARCHAR(255) NOT NULL,
    SCORE INT,
    USER_CATEGORY_ID VARCHAR(10),
    CONSTRAINT PK_CUSTOMER PRIMARY KEY(ID),
    CONSTRAINT FK_USER_UC FOREIGN KEY (USER_CATEGORY_ID) REFERENCES USER_CATEGORY(ID)
) ENGINE = InnoDB;
CREATE TABLE MOVIES(
	ID VARCHAR(10) NOT NULL UNIQUE,
	TITLE VARCHAR(255) NOT NULL,
    OVERVIEW TEXT,
    RELEASE_DATE DATE NOT NULL,
    LANGUAGE VARCHAR(50) NOT NULL,
    DURATION INT NOT NULL, -- THOI LUONG DON VI LA PHUT
    STATUS VARCHAR(20) NOT NULL, -- SAP CHIEU HOAC DANG CHIEU
    VIEW_COUNT INT,
    POSTER_PATH VARCHAR(50),
    BACKDROP_PATH VARCHAR(50),
    REVENUE DOUBLE DEFAULT 0,
    TAGLINE TEXT,
    VOTE_COUNT INT NOT NULL,
    VOTE_AVERAGE FLOAT NOT NULL,
    CONSTRAINT PK_MOVIE PRIMARY KEY(ID)
) ENGINE = InnoDB;
CREATE TABLE GENRES(
	ID VARCHAR(10),
    NAME VARCHAR(50),
    CONSTRAINT PK_GENRE PRIMARY KEY(ID)
) ENGINE = InnoDB;
CREATE TABLE MOVIE_GENRES(
	MOVIE_ID VARCHAR(10),
    GENRE_ID VARCHAR(10),
    CONSTRAINT PK_MOVIE_GENRES_ID PRIMARY KEY (MOVIE_ID, GENRE_ID),
    CONSTRAINT FK_MOVIE_GENRES_MOVIE_ID FOREIGN KEY (MOVIE_ID) REFERENCES MOVIES(ID),
    CONSTRAINT FK_MOVIE_GENRES_GENRE_ID FOREIGN KEY (GENRE_ID) REFERENCES GENRES(ID)
) ENGINE = InnoDB;
CREATE TABLE CINEMAS(
	ID VARCHAR(10) NOT NULL UNIQUE,
    NAME VARCHAR(255) NOT NULL,	-- TEN RAP CHIEU PHIM
    -- TICKET_COUNT INT,		-- SỐ VÉ ĐÃ BÁN
    ADDRESS VARCHAR(255),
    CINE_AREA VARCHAR(255) NOT NULL,
    CONSTRAINT PK_CINEMA PRIMARY KEY(ID)
) ENGINE = InnoDB;

CREATE TABLE PROMOTIONS(
	ID VARCHAR(10) NOT NULL,
    NAME VARCHAR(255),
    START_DATE DATETIME NOT NULL,
    END_DATE DATETIME NOT NULL,
    DESCRIPTION TEXT,
    DISCOUNT FLOAT,
    USER_CATEGORY_ID VARCHAR(10),
    CONSTRAINT PK_PROMOTION PRIMARY KEY(ID),
    CONSTRAINT FK_PROMOTION_UC FOREIGN KEY (USER_CATEGORY_ID) REFERENCES USER_CATEGORY(ID)
) ENGINE = InnoDB;
CREATE TABLE REVIEW(
	USER_ID VARCHAR(10) NOT NULL,
    MOVIE_ID VARCHAR(10) NOT NULL,
    RATING FLOAT,
    COMMENT VARCHAR(200),
    DATE DATETIME,
    CONSTRAINT PK_REVIEW PRIMARY KEY(USER_ID, MOVIE_ID),
    CONSTRAINT FK_REVIEW_USER FOREIGN KEY(USER_ID) REFERENCES USERS(ID),
    CONSTRAINT FK_REVIEW_MOVIE FOREIGN KEY(MOVIE_ID) REFERENCES MOVIES(ID)
) ENGINE = InnoDB;

CREATE TABLE AUTHENTICATION(
    ID VARCHAR(10) NOT NULL, -- TAI KHOAN
    PASS VARCHAR(255) NOT NULL,
    USER_ID VARCHAR(10),
    CONSTRAINT PK_ACCOUNT PRIMARY KEY(ID, PASS),
	CONSTRAINT FK_ACCOUNT_USER FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
) ENGINE = InnoDB;
CREATE TABLE SCREEN_ROOMS(
	ID VARCHAR(10) NOT NULL UNIQUE,
    NAME VARCHAR(255) NOT NULL,
    CAPACITY INT,
    CINEMA_ID VARCHAR(10),
    CONSTRAINT PK_SCREEN PRIMARY KEY(ID),
    CONSTRAINT FK_SCREEN_CINEMA FOREIGN KEY (CINEMA_ID) REFERENCES CINEMAS(ID)
) ENGINE = InnoDB;
CREATE TABLE SEAT_CATEGORY (
	ID VARCHAR(10),
    CATEGORY VARCHAR(50),
    CONSTRAINT PK_SEAT_CATEGORY PRIMARY KEY(ID)
) ENGINE = InnoDB;
CREATE TABLE SEATS(
	ID VARCHAR(10) NOT NULL UNIQUE,
    NAME VARCHAR(10),
    SCREEN_ROOM_ID VARCHAR(10) NOT NULL,
    SEAT_CATEGORY_ID VARCHAR(50), -- VIP, NORMAL, COUPLE
    SEAT_STATUS VARCHAR(30) NOT NULL, -- ONBOOKING/ AVAILABLE
    CONSTRAINT PK_SEAT PRIMARY KEY(ID),
    CONSTRAINT FK_SEAT_SCREEN FOREIGN KEY(SCREEN_ROOM_ID) REFERENCES SCREEN_ROOMS(ID),
    CONSTRAINT FK_SEAT_SEAT_CATEGORY FOREIGN KEY (SEAT_CATEGORY_ID) REFERENCES SEAT_CATEGORY(ID)
) ENGINE = InnoDB;
CREATE TABLE SHOW_TIMES (
    ID VARCHAR(10),
    START_TIME TIME,
    SHOW_DATE DATE,
    -- SCREEN_ROOM_ID VARCHAR(10),
    -- SCHEDULE_ID VARCHAR(10),
    CONSTRAINT PK_SHOW_TIME PRIMARY KEY (ID)
    -- CONSTRAINT FK_ST_SCHEDULE FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULES(ID),
    -- CONSTRAINT FK_ST_SCREEN FOREIGN KEY (SCREEN_ROOM_ID) REFERENCES SCREEN_ROOMS(ID)
) ENGINE = InnoDB;
CREATE TABLE SCHEDULES (
	ID VARCHAR(10),
    SHOW_TIME_ID VARCHAR(10),
    SCREEN_ROOM_ID VARCHAR(10),
    SHOW_DATE DATE,
    MOVIE_ID VARCHAR(10),
    CONSTRAINT PK_SCHEDULES PRIMARY KEY (ID),
    CONSTRAINT FK_SCHEDULE_ROOM FOREIGN KEY (SCREEN_ROOM_ID) REFERENCES SCREEN_ROOMS(ID),
    CONSTRAINT FK_SCHEDULE_MOVIE FOREIGN KEY (MOVIE_ID) REFERENCES MOVIES(ID),
    CONSTRAINT FK_SCHEDULE_ST FOREIGN KEY (SHOW_TIME_ID) REFERENCES SHOW_TIMES(ID)
) ENGINE = InnoDB;
CREATE TABLE TICKETS(
	ID VARCHAR(10),
    SEAT_ID VARCHAR(10),
    SCHEDULE_ID VARCHAR(10),
    CONSTRAINT PK_TICKETS PRIMARY KEY (ID),
    CONSTRAINT FK_TICKET_SEAT FOREIGN KEY (SEAT_ID) REFERENCES SEATS(ID),
    CONSTRAINT FK_TICKET_SCHEDULE FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULES(ID)
)ENGINE = InnoDB;
CREATE TABLE PAYMENT_METHODS(
	ID VARCHAR(10),
    NAME VARCHAR(45),
    CONSTRAINT PK_PAYMENT_METHODS PRIMARY KEY (ID)
) ENGINE = InnoDB;
CREATE TABLE PAYMENTS(
	ID VARCHAR(10) NOT NULL UNIQUE,
    USER_ID VARCHAR(10) NOT NULL,
    PAYMENT_DATE DATETIME NOT NULL,
    PAYMENT_METHOD_ID VARCHAR(10) NOT NULL,	-- PHUONG THUC THANH TOAN
    TOTAL_AMOUNT DECIMAL(20) NOT NULL,
    SCHEDULE_ID VARCHAR(10) NOT NULL,
    PROMOTION_ID VARCHAR(10),
    CONSTRAINT PK_PAYMENT PRIMARY KEY(ID),
    CONSTRAINT FK_PAYMENT_SCHEDULE FOREIGN KEY (SCHEDULE_ID) REFERENCES SCHEDULES(ID),
    CONSTRAINT FK_PAYMENT_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    CONSTRAINT FK_PAYMENT_PM FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHODS(ID),
    CONSTRAINT FK_PAYMENT_PROMOTION FOREIGN KEY (PROMOTION_ID) REFERENCES PROMOTIONS(ID)
) ENGINE = InnoDB;
CREATE TABLE BOOKING_TICKETS(
	PAYMENT_ID VARCHAR(10),
    TICKET_ID VARCHAR(10),
    CONSTRAINT PK_BOOKING_SEATS PRIMARY KEY (PAYMENT_ID, TICKET_ID),
    CONSTRAINT FK_BS_TICKET FOREIGN KEY (TICKET_ID) REFERENCES TICKETS(ID),
    CONSTRAINT FK_BS_PAYMENT FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENTS(ID)
) ENGINE = InnoDB;
CREATE TABLE ITEM_CATEGORY(
	ID VARCHAR(10),
    CATEGORY VARCHAR(50),
    CONSTRAINT PK_ITEM_CATEGORY PRIMARY KEY(ID)
) ENGINE = InnoDB;
CREATE TABLE ITEMS(
	ID VARCHAR(10) NOT NULL UNIQUE,
    NAME VARCHAR(255) NOT NULL,
    ITEM_CATEGORY_ID VARCHAR(10) NOT NULL,		-- LOAI ITEM: NUOC, BAP, ...
    REVENUE DOUBLE DEFAULT 0,
    CONSTRAINT PK_ITEM PRIMARY KEY(ID),
    CONSTRAINT FK_ITEM_ITEM_CATEGORY FOREIGN KEY (ITEM_CATEGORY_ID) REFERENCES ITEM_CATEGORY(ID)
) ENGINE = InnoDB;
CREATE TABLE PRICES (
	ID VARCHAR(10),
	COMPONENT_ID VARCHAR(10),
    PRICE DECIMAL(20) DEFAULT 0,
    DATE DATETIME,
    CONSTRAINT PK_PRICE PRIMARY KEY(ID)
) ENGINE = InnoDB;
CREATE TABLE BOOKING_ITEMS(
	PAYMENT_ID VARCHAR(10),
	ITEM_ID VARCHAR(10),
    QUANTITY INT,
    CONSTRAINT PK_BOOKING_ITEM PRIMARY KEY (ITEM_ID, PAYMENT_ID),
    CONSTRAINT FK_BI_ITEM FOREIGN KEY (ITEM_ID) REFERENCES ITEMS(ID),
    CONSTRAINT FK_BI_TI FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENTS(ID)
)ENGINE = InnoDB;


-- PROCEDURE:

DELIMITER //
CREATE PROCEDURE increaseViewCount()
BEGIN
	UPDATE MOVIES SET VIEW_COUNT = VIEW_COUNT + 1;
END; //
DELIMITER ;


-- TRIGGER INSERT:

-- DELIMITER //
-- CREATE TRIGGER TG_INSERT_PAYMENTS
-- AFTER INSERT ON PAYMENTS
-- FOR EACH ROW
-- BEGIN
-- 	UPDATE USERS SET SCORE = SCORE + NEW.TOTAL_AMOUNT / 1000 WHERE ID = NEW.USER_ID;

-- 	UPDATE MOVIES SET REVENUE = REVENUE + (SELECT SUM(P.PRICE)
-- 										   FROM PRICES P, SEAT_CATEGORY SC, SEATS S, BOOKING_TICKETS BT, TICKETS T
--                                            WHERE BT.PAYMENT_ID = NEW.ID AND BT.TICKET_ID = T.ID AND T.SEAT_ID = S.ID AND S.SEAT_CATEGORY_ID = SC.ID AND P.COMPONENT_ID = SC.ID)
--     WHERE ID = (SELECT S.MOVIE_ID
-- 				FROM SCHEDULES S
--                 WHERE NEW.SCHEDULE_ID = S.ID
--                 LIMIT 1);

-- 	UPDATE ITEMS SET REVENUE = REVENUE + (SELECT SUM(P.PRICE)
-- 										  FROM PRICES P, ITEM_CATEGORY IC, BOOKING_ITEMS BI
--                                           WHERE NEW.ID = BI.PAYMENT_ID AND BI.ITEM_ID = ITEMS.ID AND ITEMS.ITEM_CATEGORY_ID = IC.ID AND IC.ID = P.COMPONENT_ID)
--     WHERE ID = (SELECT BI.ITEM_ID
-- 				FROM BOOKING_ITEMS BI
-- 				WHERE BI.PAYMENT_ID = NEW.ID);

-- END; //
-- DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_INSERT_REVIEW
AFTER INSERT ON REVIEW
FOR EACH ROW
BEGIN
    UPDATE MOVIES SET VOTE_AVERAGE = ((VOTE_AVERAGE * VOTE_COUNT) + NEW.RATING) / (VOTE_COUNT + 1) WHERE ID = NEW.MOVIE_ID;
	UPDATE MOVIES SET VOTE_COUNT = VOTE_COUNT + 1 WHERE ID = NEW.MOVIE_ID;
END; //
DELIMITER ;


-- TRIGGER DELETE:

DELIMITER //
CREATE TRIGGER TG_DELETE_USERS
BEFORE DELETE ON USERS
FOR EACH ROW
BEGIN
	DELETE FROM AUTHENTICATION WHERE OLD.ID = USER_ID;
    DELETE FROM REVIEW WHERE OLD.ID = USER_ID;
    DELETE FROM PAYMENTS WHERE OLD.ID = USER_ID;
END; //
DELIMITER ;

-- SELECT * FROM USERS;
-- SELECT * FROM AUTHENTICATION;
-- SELECT * FROM REVIEW;
-- SELECT * FROM PAYMENTS;

-- DELETE FROM USERS WHERE ID = 'U0001';


DELIMITER //
CREATE TRIGGER TG_DELETE_SEATS
BEFORE DELETE ON SEATS
FOR EACH ROW
BEGIN
	DELETE FROM TICKETS WHERE SEAT_ID = OLD.ID;
END; //
DELIMITER ;

-- SELECT * FROM SEATS;
-- SELECT * FROM TICKETS;

-- DELETE FROM SEATS WHERE ID = 'SEA0001';

DELIMITER //
CREATE TRIGGER TG_DELETE_SCREENROOMS
BEFORE DELETE ON SCREEN_ROOMS
FOR EACH ROW
BEGIN
	DELETE FROM SEATS WHERE SCREEN_ROOM_ID = OLD.ID;
    DELETE FROM SCHEDULES WHERE SCREEN_ROOM_ID = OLD.ID;
END; //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_DELETE_TICKETS
BEFORE DELETE ON TICKETS
FOR EACH ROW
BEGIN
	DELETE FROM BOOKING_TICKETS WHERE TICKET_ID = OLD.ID;
END; //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_DELETE_ITEMS
BEFORE DELETE ON ITEMS
FOR EACH ROW
BEGIN
	DELETE FROM BOOKING_ITEMS WHERE ITEM_ID = OLD.ID;
END; //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_DELETE_MOVIES
BEFORE DELETE ON MOVIES
FOR EACH ROW
BEGIN
	DELETE FROM MOVIE_GENRES WHERE MOVIE_ID = OLD.ID;
    DELETE FROM REVIEW WHERE MOVIE_ID = OLD.ID;
    DELETE FROM SCHEDULES WHERE MOVIE_ID = OLD.ID;
END; //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_DELETE_GENRES
BEFORE DELETE ON GENRES
FOR EACH ROW
BEGIN
	DELETE FROM MOVIE_GENRES WHERE GENRE_ID = OLD.ID;
END; //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_DELETE_CINEMAS
BEFORE DELETE ON CINEMAS
FOR EACH ROW
BEGIN
	DELETE FROM SCREEN_ROOMS WHERE CINEMA_ID = OLD.ID;
END; //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_DELETE_REVIEW
BEFORE DELETE ON REVIEW
FOR EACH ROW
BEGIN
    UPDATE MOVIES SET VOTE_AVERAGE = ((VOTE_AVERAGE * VOTE_COUNT) - OLD.RATING) / (VOTE_COUNT - 1) WHERE ID = OLD.MOVIE_ID;
	UPDATE MOVIES SET VOTE_COUNT = VOTE_COUNT - 1 WHERE ID = OLD.MOVIE_ID;
END; //
DELIMITER ;


-- TRIGGER UPDATE

DELIMITER //
CREATE TRIGGER TG_UPDATE_REVIEW
AFTER UPDATE ON REVIEW
FOR EACH ROW
BEGIN
    UPDATE MOVIES SET VOTE_AVERAGE = ((VOTE_AVERAGE * VOTE_COUNT) - OLD.RATING + NEW.RATING) / (VOTE_COUNT) WHERE ID = NEW.MOVIE_ID;
END; //
DELIMITER ;

-- SELECT * FROM REVIEW;
-- SELECT * FROM MOVIES;


-- FAKE DATA:

INSERT INTO USER_CATEGORY(ID, CATEGORY) VALUES('UC0001', 'ADMIN');

INSERT INTO USERS(ID, USERNAME, FIRST_NAME, LAST_NAME, DOB, GENDER, ADDRESS, PHONE, EMAIL, USER_ROLE, SCORE, USER_CATEGORY_ID)
VALUES ('U0001', 'mduc017', 'minh', 'duc', '2003-05-17', 'm', 'MELOSO KHANG DIEN', '0123456789', 'mduc017@gmail.com', 'admin', '0', 'UC0001');

INSERT INTO AUTHENTICATION(ID, PASS, USER_ID)
VALUES ('A0001', '123123', 'U0001');

INSERT INTO MOVIES(ID, TITLE, OVERVIEW, RELEASE_DATE, LANGUAGE, DURATION, STATUS, VIEW_COUNT, POSTER_PATH, BACKDROP_PATH, REVENUE, TAGLINE, VOTE_COUNT, VOTE_AVERAGE)
VALUES ('M0001', 'Movie 1', 'Phim 1', '2020-10-10', 'VN, ENG', '90', 'COMING SOON', '100', 'www.poster.com', 'www.backdrop.com', '0', 'tagline', '100', '1');

INSERT INTO REVIEW(USER_ID, MOVIE_ID, RATING, COMMENT, DATE)
VALUES ('U0001', 'M0001', '5', 'Xuat Sac', '2023-10-10');

INSERT INTO CINEMAS(ID, NAME, ADDRESS, CINE_AREA)
VALUES ('C0001', 'Rap phim 1', 'THU DUC', 'TPHCM');

INSERT INTO SCREEN_ROOMS(ID, NAME, CAPACITY, CINEMA_ID)
VALUES ('SR0001', 'ROOM 1', '20', 'C0001');

INSERT INTO SHOW_TIMES(ID, START_TIME, SHOW_DATE)
VALUES ('ST0001', '10:00:00', '2020-10-10');

INSERT INTO SCHEDULES(ID, SHOW_TIME_ID, SCREEN_ROOM_ID, SHOW_DATE, MOVIE_ID)
VALUES ('S0001', 'ST0001', 'SR0001', '2023-10-10', 'M0001');

INSERT INTO SEAT_CATEGORY(ID, CATEGORY)
VALUES('SC0001', 'VIP');

INSERT INTO SEATS(ID, NAME, SCREEN_ROOM_ID, SEAT_CATEGORY_ID, SEAT_STATUS)
VALUES ('SEA0001', 'SEAT 1', 'SR0001', 'SC0001', 'Trong');

INSERT INTO TICKETS(ID, SEAT_ID, SCHEDULE_ID)
VALUES ('T0001', 'SEA0001', 'S0001');

INSERT INTO ITEM_CATEGORY(ID, CATEGORY)
VALUES ('IC0001', 'Nuoc');

INSERT INTO ITEMS(ID, NAME, ITEM_CATEGORY_ID, REVENUE)
VALUES ('I0001', 'Pepsi', 'IC0001', '0');

INSERT INTO PRICES(ID, COMPONENT_ID, PRICE, DATE)
VALUES ('P0001', 'IC0001', '100000', '2023-6-2');
INSERT INTO PRICES(ID, COMPONENT_ID, PRICE, DATE)
VALUES ('P0002', 'SC0001', '200000', '2023-6-2');

INSERT INTO PAYMENT_METHODS(ID, NAME)
VALUES ('PM0001', 'MOMO');

-- SELECT * FROM PROMOTIONS;

-- SELECT * FROM PAYMENTS;
INSERT INTO PAYMENTS(ID, USER_ID, PAYMENT_DATE, PAYMENT_METHOD_ID, TOTAL_AMOUNT, SCHEDULE_ID)
VALUES ('P0001', 'U0001', '2020-6-2', 'PM0001', '0', 'S0001');

-- SELECT * FROM USERS;
-- SELECT * FROM MOVIES;
-- SELECT * FROM ITEMS;

-- INSERT INTO GENRES(ID, NAME) VALUES ('G0001', 'GENRES 1');

-- INSERT INTO MOVIE_GENRES(MOVIE_ID, GENRE_ID) VALUES ('M0001', 'G0001');

-- DELETE FROM GENRES WHERE ID = 'G0001';
-- DELETE FROM CINEMAS WHERE ID = 'CIN_00005';
-- select *  FROM CINEMAS WHERE ID = 'CIN_00005';

